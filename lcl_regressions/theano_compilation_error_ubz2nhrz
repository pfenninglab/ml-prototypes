===============================
00001	#include <Python.h>
00002	#include <iostream>
00003	#include "theano_mod_helper.h"
00004	#include <math.h>
00005	#include <numpy/arrayobject.h>
00006	#include <numpy/arrayscalars.h>
00007	//////////////////////
00008	////  Support Code
00009	//////////////////////
00010	
00011	    namespace {
00012	    struct __struct_compiled_op_m75022cac696dc858984a7c4467166cc6915405b19d04c2580f5acf71c834d9de {
00013	        PyObject* __ERROR;
00014	
00015	        PyObject* storage_V3;
00016	PyObject* storage_V5;
00017	PyObject* storage_V7;
00018	PyObject* storage_V9;
00019	PyObject* storage_V11;
00020	PyObject* storage_V13;
00021	PyObject* storage_V1;
00022	        
00023	
00024	        __struct_compiled_op_m75022cac696dc858984a7c4467166cc6915405b19d04c2580f5acf71c834d9de() {
00025	            // This is only somewhat safe because we:
00026	            //  1) Are not a virtual class
00027	            //  2) Do not use any virtual classes in the members
00028	            //  3) Deal with mostly POD and pointers
00029	
00030	            // If this changes, we would have to revise this, but for
00031	            // now I am tired of chasing segfaults because
00032	            // initialization code had an error and some pointer has
00033	            // a junk value.
00034	            #ifndef THEANO_DONT_MEMSET_STRUCT
00035	            memset(this, 0, sizeof(*this));
00036	            #endif
00037	        }
00038	        ~__struct_compiled_op_m75022cac696dc858984a7c4467166cc6915405b19d04c2580f5acf71c834d9de(void) {
00039	            cleanup();
00040	        }
00041	
00042	        int init(PyObject* __ERROR, PyObject* storage_V3, PyObject* storage_V5, PyObject* storage_V7, PyObject* storage_V9, PyObject* storage_V11, PyObject* storage_V13, PyObject* storage_V1) {
00043	            Py_XINCREF(storage_V3);
00044	Py_XINCREF(storage_V5);
00045	Py_XINCREF(storage_V7);
00046	Py_XINCREF(storage_V9);
00047	Py_XINCREF(storage_V11);
00048	Py_XINCREF(storage_V13);
00049	Py_XINCREF(storage_V1);
00050	            this->storage_V3 = storage_V3;
00051	this->storage_V5 = storage_V5;
00052	this->storage_V7 = storage_V7;
00053	this->storage_V9 = storage_V9;
00054	this->storage_V11 = storage_V11;
00055	this->storage_V13 = storage_V13;
00056	this->storage_V1 = storage_V1;
00057	            
00058	
00059	
00060	
00061	
00062	
00063	
00064	
00065	
00066	            this->__ERROR = __ERROR;
00067	            return 0;
00068	        }
00069	        void cleanup(void) {
00070	            __label_1:
00071	
00072	double __DUMMY_1;
00073	__label_3:
00074	
00075	double __DUMMY_3;
00076	__label_5:
00077	
00078	double __DUMMY_5;
00079	__label_7:
00080	
00081	double __DUMMY_7;
00082	__label_9:
00083	
00084	double __DUMMY_9;
00085	__label_11:
00086	
00087	double __DUMMY_11;
00088	__label_13:
00089	
00090	double __DUMMY_13;
00091	__label_16:
00092	
00093	double __DUMMY_16;
00094	
00095	            Py_XDECREF(this->storage_V3);
00096	Py_XDECREF(this->storage_V5);
00097	Py_XDECREF(this->storage_V7);
00098	Py_XDECREF(this->storage_V9);
00099	Py_XDECREF(this->storage_V11);
00100	Py_XDECREF(this->storage_V13);
00101	Py_XDECREF(this->storage_V1);
00102	        }
00103	        int run(void) {
00104	            int __failure = 0;
00105	            
00106	    PyObject* py_V1;
00107	    
00108	        PyArrayObject* V1;
00109	        
00110	            typedef npy_int32 dtype_V1;
00111	            
00112	    PyObject* py_V3;
00113	    
00114	        PyArrayObject* V3;
00115	        
00116	            typedef npy_int64 dtype_V3;
00117	            
00118	    PyObject* py_V5;
00119	    
00120	        PyArrayObject* V5;
00121	        
00122	            typedef npy_int32 dtype_V5;
00123	            
00124	    PyObject* py_V7;
00125	    
00126	        PyArrayObject* V7;
00127	        
00128	            typedef npy_int32 dtype_V7;
00129	            
00130	    PyObject* py_V9;
00131	    
00132	        PyArrayObject* V9;
00133	        
00134	            typedef npy_int64 dtype_V9;
00135	            
00136	    PyObject* py_V11;
00137	    
00138	        PyArrayObject* V11;
00139	        
00140	            typedef npy_int32 dtype_V11;
00141	            
00142	    PyObject* py_V13;
00143	    
00144	        PyArrayObject* V13;
00145	        
00146	            typedef npy_int32 dtype_V13;
00147	            
00148	{
00149	
00150	    py_V1 = PyList_GET_ITEM(storage_V1, 0);
00151	    {Py_XINCREF(py_V1);}
00152	    
00153	        if (py_V1 == Py_None)
00154	        {
00155	            
00156	        V1 = NULL;
00157	        
00158	        }
00159	        else
00160	        {
00161	            
00162	            V1 = NULL;
00163	            if (py_V1 == Py_None) {
00164	                // We can either fail here or set V1 to NULL and rely on Ops
00165	                // using tensors to handle the NULL case, but if they fail to do so
00166	                // they'll end up with nasty segfaults, so this is public service.
00167	                PyErr_SetString(PyExc_ValueError, "expected an ndarray, not None");
00168	                {
00169	        __failure = 2;
00170	        if (!PyErr_Occurred()) {
00171	            PyErr_SetString(PyExc_RuntimeError,
00172	                "Unexpected error in an Op's C code. "
00173	                "No Python exception was set.");
00174	        }
00175	        goto __label_2;}
00176	            }
00177	            if (!PyArray_Check(py_V1)) {
00178	                PyErr_SetString(PyExc_ValueError, "expected an ndarray");
00179	                {
00180	        __failure = 2;
00181	        if (!PyErr_Occurred()) {
00182	            PyErr_SetString(PyExc_RuntimeError,
00183	                "Unexpected error in an Op's C code. "
00184	                "No Python exception was set.");
00185	        }
00186	        goto __label_2;}
00187	            }
00188	            // We expect NPY_INT32
00189	            if (!PyArray_ISALIGNED((PyArrayObject*) py_V1)) {
00190	                PyArrayObject * tmp = (PyArrayObject*) py_V1;
00191	                PyErr_Format(PyExc_NotImplementedError,
00192	                             "expected an aligned array of type %ld "
00193	                             "(NPY_INT32), got non-aligned array of type %ld"
00194	                             " with %ld dimensions, with 3 last dims "
00195	                             "%ld, %ld, %ld"
00196	                             " and 3 last strides %ld %ld, %ld.",
00197	                             (long int) NPY_INT32,
00198	                             (long int) PyArray_TYPE((PyArrayObject*) py_V1),
00199	                             (long int) PyArray_NDIM(tmp),
00200	                             (long int) (PyArray_NDIM(tmp) >= 3 ?
00201	            PyArray_DIMS(tmp)[PyArray_NDIM(tmp)-3] : -1),
00202	                             (long int) (PyArray_NDIM(tmp) >= 2 ?
00203	            PyArray_DIMS(tmp)[PyArray_NDIM(tmp)-2] : -1),
00204	                             (long int) (PyArray_NDIM(tmp) >= 1 ?
00205	            PyArray_DIMS(tmp)[PyArray_NDIM(tmp)-1] : -1),
00206	                             (long int) (PyArray_NDIM(tmp) >= 3 ?
00207	            PyArray_STRIDES(tmp)[PyArray_NDIM(tmp)-3] : -1),
00208	                             (long int) (PyArray_NDIM(tmp) >= 2 ?
00209	            PyArray_STRIDES(tmp)[PyArray_NDIM(tmp)-2] : -1),
00210	                             (long int) (PyArray_NDIM(tmp) >= 1 ?
00211	            PyArray_STRIDES(tmp)[PyArray_NDIM(tmp)-1] : -1)
00212	            );
00213	                {
00214	        __failure = 2;
00215	        if (!PyErr_Occurred()) {
00216	            PyErr_SetString(PyExc_RuntimeError,
00217	                "Unexpected error in an Op's C code. "
00218	                "No Python exception was set.");
00219	        }
00220	        goto __label_2;}
00221	            }
00222	            // This is a TypeError to be consistent with DEBUG_MODE
00223	            // Note: DEBUG_MODE also tells the name of the container
00224	            if (PyArray_TYPE((PyArrayObject*) py_V1) != NPY_INT32) {
00225	                PyErr_Format(PyExc_TypeError,
00226	                             "expected type_num %d (NPY_INT32) got %d",
00227	                             NPY_INT32, PyArray_TYPE((PyArrayObject*) py_V1));
00228	                {
00229	        __failure = 2;
00230	        if (!PyErr_Occurred()) {
00231	            PyErr_SetString(PyExc_RuntimeError,
00232	                "Unexpected error in an Op's C code. "
00233	                "No Python exception was set.");
00234	        }
00235	        goto __label_2;}
00236	            }
00237	            
00238	        V1 = (PyArrayObject*)(py_V1);
00239	        Py_XINCREF(V1);
00240	        
00241	        }
00242	        
00243	{
00244	
00245	    py_V3 = PyList_GET_ITEM(storage_V3, 0);
00246	    {Py_XINCREF(py_V3);}
00247	    
00248	            V3 = NULL;
00249	            if (py_V3 == Py_None) {
00250	                // We can either fail here or set V3 to NULL and rely on Ops
00251	                // using tensors to handle the NULL case, but if they fail to do so
00252	                // they'll end up with nasty segfaults, so this is public service.
00253	                PyErr_SetString(PyExc_ValueError, "expected an ndarray, not None");
00254	                {
00255	        __failure = 4;
00256	        if (!PyErr_Occurred()) {
00257	            PyErr_SetString(PyExc_RuntimeError,
00258	                "Unexpected error in an Op's C code. "
00259	                "No Python exception was set.");
00260	        }
00261	        goto __label_4;}
00262	            }
00263	            if (!PyArray_Check(py_V3)) {
00264	                PyErr_SetString(PyExc_ValueError, "expected an ndarray");
00265	                {
00266	        __failure = 4;
00267	        if (!PyErr_Occurred()) {
00268	            PyErr_SetString(PyExc_RuntimeError,
00269	                "Unexpected error in an Op's C code. "
00270	                "No Python exception was set.");
00271	        }
00272	        goto __label_4;}
00273	            }
00274	            // We expect NPY_INT64
00275	            if (!PyArray_ISALIGNED((PyArrayObject*) py_V3)) {
00276	                PyArrayObject * tmp = (PyArrayObject*) py_V3;
00277	                PyErr_Format(PyExc_NotImplementedError,
00278	                             "expected an aligned array of type %ld "
00279	                             "(NPY_INT64), got non-aligned array of type %ld"
00280	                             " with %ld dimensions, with 3 last dims "
00281	                             "%ld, %ld, %ld"
00282	                             " and 3 last strides %ld %ld, %ld.",
00283	                             (long int) NPY_INT64,
00284	                             (long int) PyArray_TYPE((PyArrayObject*) py_V3),
00285	                             (long int) PyArray_NDIM(tmp),
00286	                             (long int) (PyArray_NDIM(tmp) >= 3 ?
00287	            PyArray_DIMS(tmp)[PyArray_NDIM(tmp)-3] : -1),
00288	                             (long int) (PyArray_NDIM(tmp) >= 2 ?
00289	            PyArray_DIMS(tmp)[PyArray_NDIM(tmp)-2] : -1),
00290	                             (long int) (PyArray_NDIM(tmp) >= 1 ?
00291	            PyArray_DIMS(tmp)[PyArray_NDIM(tmp)-1] : -1),
00292	                             (long int) (PyArray_NDIM(tmp) >= 3 ?
00293	            PyArray_STRIDES(tmp)[PyArray_NDIM(tmp)-3] : -1),
00294	                             (long int) (PyArray_NDIM(tmp) >= 2 ?
00295	            PyArray_STRIDES(tmp)[PyArray_NDIM(tmp)-2] : -1),
00296	                             (long int) (PyArray_NDIM(tmp) >= 1 ?
00297	            PyArray_STRIDES(tmp)[PyArray_NDIM(tmp)-1] : -1)
00298	            );
00299	                {
00300	        __failure = 4;
00301	        if (!PyErr_Occurred()) {
00302	            PyErr_SetString(PyExc_RuntimeError,
00303	                "Unexpected error in an Op's C code. "
00304	                "No Python exception was set.");
00305	        }
00306	        goto __label_4;}
00307	            }
00308	            // This is a TypeError to be consistent with DEBUG_MODE
00309	            // Note: DEBUG_MODE also tells the name of the container
00310	            if (PyArray_TYPE((PyArrayObject*) py_V3) != NPY_INT64) {
00311	                PyErr_Format(PyExc_TypeError,
00312	                             "expected type_num %d (NPY_INT64) got %d",
00313	                             NPY_INT64, PyArray_TYPE((PyArrayObject*) py_V3));
00314	                {
00315	        __failure = 4;
00316	        if (!PyErr_Occurred()) {
00317	            PyErr_SetString(PyExc_RuntimeError,
00318	                "Unexpected error in an Op's C code. "
00319	                "No Python exception was set.");
00320	        }
00321	        goto __label_4;}
00322	            }
00323	            
00324	        V3 = (PyArrayObject*)(py_V3);
00325	        Py_XINCREF(V3);
00326	        
00327	{
00328	
00329	    py_V5 = PyList_GET_ITEM(storage_V5, 0);
00330	    {Py_XINCREF(py_V5);}
00331	    
00332	            V5 = NULL;
00333	            if (py_V5 == Py_None) {
00334	                // We can either fail here or set V5 to NULL and rely on Ops
00335	                // using tensors to handle the NULL case, but if they fail to do so
00336	                // they'll end up with nasty segfaults, so this is public service.
00337	                PyErr_SetString(PyExc_ValueError, "expected an ndarray, not None");
00338	                {
00339	        __failure = 6;
00340	        if (!PyErr_Occurred()) {
00341	            PyErr_SetString(PyExc_RuntimeError,
00342	                "Unexpected error in an Op's C code. "
00343	                "No Python exception was set.");
00344	        }
00345	        goto __label_6;}
00346	            }
00347	            if (!PyArray_Check(py_V5)) {
00348	                PyErr_SetString(PyExc_ValueError, "expected an ndarray");
00349	                {
00350	        __failure = 6;
00351	        if (!PyErr_Occurred()) {
00352	            PyErr_SetString(PyExc_RuntimeError,
00353	                "Unexpected error in an Op's C code. "
00354	                "No Python exception was set.");
00355	        }
00356	        goto __label_6;}
00357	            }
00358	            // We expect NPY_INT32
00359	            if (!PyArray_ISALIGNED((PyArrayObject*) py_V5)) {
00360	                PyArrayObject * tmp = (PyArrayObject*) py_V5;
00361	                PyErr_Format(PyExc_NotImplementedError,
00362	                             "expected an aligned array of type %ld "
00363	                             "(NPY_INT32), got non-aligned array of type %ld"
00364	                             " with %ld dimensions, with 3 last dims "
00365	                             "%ld, %ld, %ld"
00366	                             " and 3 last strides %ld %ld, %ld.",
00367	                             (long int) NPY_INT32,
00368	                             (long int) PyArray_TYPE((PyArrayObject*) py_V5),
00369	                             (long int) PyArray_NDIM(tmp),
00370	                             (long int) (PyArray_NDIM(tmp) >= 3 ?
00371	            PyArray_DIMS(tmp)[PyArray_NDIM(tmp)-3] : -1),
00372	                             (long int) (PyArray_NDIM(tmp) >= 2 ?
00373	            PyArray_DIMS(tmp)[PyArray_NDIM(tmp)-2] : -1),
00374	                             (long int) (PyArray_NDIM(tmp) >= 1 ?
00375	            PyArray_DIMS(tmp)[PyArray_NDIM(tmp)-1] : -1),
00376	                             (long int) (PyArray_NDIM(tmp) >= 3 ?
00377	            PyArray_STRIDES(tmp)[PyArray_NDIM(tmp)-3] : -1),
00378	                             (long int) (PyArray_NDIM(tmp) >= 2 ?
00379	            PyArray_STRIDES(tmp)[PyArray_NDIM(tmp)-2] : -1),
00380	                             (long int) (PyArray_NDIM(tmp) >= 1 ?
00381	            PyArray_STRIDES(tmp)[PyArray_NDIM(tmp)-1] : -1)
00382	            );
00383	                {
00384	        __failure = 6;
00385	        if (!PyErr_Occurred()) {
00386	            PyErr_SetString(PyExc_RuntimeError,
00387	                "Unexpected error in an Op's C code. "
00388	                "No Python exception was set.");
00389	        }
00390	        goto __label_6;}
00391	            }
00392	            // This is a TypeError to be consistent with DEBUG_MODE
00393	            // Note: DEBUG_MODE also tells the name of the container
00394	            if (PyArray_TYPE((PyArrayObject*) py_V5) != NPY_INT32) {
00395	                PyErr_Format(PyExc_TypeError,
00396	                             "expected type_num %d (NPY_INT32) got %d",
00397	                             NPY_INT32, PyArray_TYPE((PyArrayObject*) py_V5));
00398	                {
00399	        __failure = 6;
00400	        if (!PyErr_Occurred()) {
00401	            PyErr_SetString(PyExc_RuntimeError,
00402	                "Unexpected error in an Op's C code. "
00403	                "No Python exception was set.");
00404	        }
00405	        goto __label_6;}
00406	            }
00407	            
00408	        V5 = (PyArrayObject*)(py_V5);
00409	        Py_XINCREF(V5);
00410	        
00411	{
00412	
00413	    py_V7 = PyList_GET_ITEM(storage_V7, 0);
00414	    {Py_XINCREF(py_V7);}
00415	    
00416	            V7 = NULL;
00417	            if (py_V7 == Py_None) {
00418	                // We can either fail here or set V7 to NULL and rely on Ops
00419	                // using tensors to handle the NULL case, but if they fail to do so
00420	                // they'll end up with nasty segfaults, so this is public service.
00421	                PyErr_SetString(PyExc_ValueError, "expected an ndarray, not None");
00422	                {
00423	        __failure = 8;
00424	        if (!PyErr_Occurred()) {
00425	            PyErr_SetString(PyExc_RuntimeError,
00426	                "Unexpected error in an Op's C code. "
00427	                "No Python exception was set.");
00428	        }
00429	        goto __label_8;}
00430	            }
00431	            if (!PyArray_Check(py_V7)) {
00432	                PyErr_SetString(PyExc_ValueError, "expected an ndarray");
00433	                {
00434	        __failure = 8;
00435	        if (!PyErr_Occurred()) {
00436	            PyErr_SetString(PyExc_RuntimeError,
00437	                "Unexpected error in an Op's C code. "
00438	                "No Python exception was set.");
00439	        }
00440	        goto __label_8;}
00441	            }
00442	            // We expect NPY_INT32
00443	            if (!PyArray_ISALIGNED((PyArrayObject*) py_V7)) {
00444	                PyArrayObject * tmp = (PyArrayObject*) py_V7;
00445	                PyErr_Format(PyExc_NotImplementedError,
00446	                             "expected an aligned array of type %ld "
00447	                             "(NPY_INT32), got non-aligned array of type %ld"
00448	                             " with %ld dimensions, with 3 last dims "
00449	                             "%ld, %ld, %ld"
00450	                             " and 3 last strides %ld %ld, %ld.",
00451	                             (long int) NPY_INT32,
00452	                             (long int) PyArray_TYPE((PyArrayObject*) py_V7),
00453	                             (long int) PyArray_NDIM(tmp),
00454	                             (long int) (PyArray_NDIM(tmp) >= 3 ?
00455	            PyArray_DIMS(tmp)[PyArray_NDIM(tmp)-3] : -1),
00456	                             (long int) (PyArray_NDIM(tmp) >= 2 ?
00457	            PyArray_DIMS(tmp)[PyArray_NDIM(tmp)-2] : -1),
00458	                             (long int) (PyArray_NDIM(tmp) >= 1 ?
00459	            PyArray_DIMS(tmp)[PyArray_NDIM(tmp)-1] : -1),
00460	                             (long int) (PyArray_NDIM(tmp) >= 3 ?
00461	            PyArray_STRIDES(tmp)[PyArray_NDIM(tmp)-3] : -1),
00462	                             (long int) (PyArray_NDIM(tmp) >= 2 ?
00463	            PyArray_STRIDES(tmp)[PyArray_NDIM(tmp)-2] : -1),
00464	                             (long int) (PyArray_NDIM(tmp) >= 1 ?
00465	            PyArray_STRIDES(tmp)[PyArray_NDIM(tmp)-1] : -1)
00466	            );
00467	                {
00468	        __failure = 8;
00469	        if (!PyErr_Occurred()) {
00470	            PyErr_SetString(PyExc_RuntimeError,
00471	                "Unexpected error in an Op's C code. "
00472	                "No Python exception was set.");
00473	        }
00474	        goto __label_8;}
00475	            }
00476	            // This is a TypeError to be consistent with DEBUG_MODE
00477	            // Note: DEBUG_MODE also tells the name of the container
00478	            if (PyArray_TYPE((PyArrayObject*) py_V7) != NPY_INT32) {
00479	                PyErr_Format(PyExc_TypeError,
00480	                             "expected type_num %d (NPY_INT32) got %d",
00481	                             NPY_INT32, PyArray_TYPE((PyArrayObject*) py_V7));
00482	                {
00483	        __failure = 8;
00484	        if (!PyErr_Occurred()) {
00485	            PyErr_SetString(PyExc_RuntimeError,
00486	                "Unexpected error in an Op's C code. "
00487	                "No Python exception was set.");
00488	        }
00489	        goto __label_8;}
00490	            }
00491	            
00492	        V7 = (PyArrayObject*)(py_V7);
00493	        Py_XINCREF(V7);
00494	        
00495	{
00496	
00497	    py_V9 = PyList_GET_ITEM(storage_V9, 0);
00498	    {Py_XINCREF(py_V9);}
00499	    
00500	            V9 = NULL;
00501	            if (py_V9 == Py_None) {
00502	                // We can either fail here or set V9 to NULL and rely on Ops
00503	                // using tensors to handle the NULL case, but if they fail to do so
00504	                // they'll end up with nasty segfaults, so this is public service.
00505	                PyErr_SetString(PyExc_ValueError, "expected an ndarray, not None");
00506	                {
00507	        __failure = 10;
00508	        if (!PyErr_Occurred()) {
00509	            PyErr_SetString(PyExc_RuntimeError,
00510	                "Unexpected error in an Op's C code. "
00511	                "No Python exception was set.");
00512	        }
00513	        goto __label_10;}
00514	            }
00515	            if (!PyArray_Check(py_V9)) {
00516	                PyErr_SetString(PyExc_ValueError, "expected an ndarray");
00517	                {
00518	        __failure = 10;
00519	        if (!PyErr_Occurred()) {
00520	            PyErr_SetString(PyExc_RuntimeError,
00521	                "Unexpected error in an Op's C code. "
00522	                "No Python exception was set.");
00523	        }
00524	        goto __label_10;}
00525	            }
00526	            // We expect NPY_INT64
00527	            if (!PyArray_ISALIGNED((PyArrayObject*) py_V9)) {
00528	                PyArrayObject * tmp = (PyArrayObject*) py_V9;
00529	                PyErr_Format(PyExc_NotImplementedError,
00530	                             "expected an aligned array of type %ld "
00531	                             "(NPY_INT64), got non-aligned array of type %ld"
00532	                             " with %ld dimensions, with 3 last dims "
00533	                             "%ld, %ld, %ld"
00534	                             " and 3 last strides %ld %ld, %ld.",
00535	                             (long int) NPY_INT64,
00536	                             (long int) PyArray_TYPE((PyArrayObject*) py_V9),
00537	                             (long int) PyArray_NDIM(tmp),
00538	                             (long int) (PyArray_NDIM(tmp) >= 3 ?
00539	            PyArray_DIMS(tmp)[PyArray_NDIM(tmp)-3] : -1),
00540	                             (long int) (PyArray_NDIM(tmp) >= 2 ?
00541	            PyArray_DIMS(tmp)[PyArray_NDIM(tmp)-2] : -1),
00542	                             (long int) (PyArray_NDIM(tmp) >= 1 ?
00543	            PyArray_DIMS(tmp)[PyArray_NDIM(tmp)-1] : -1),
00544	                             (long int) (PyArray_NDIM(tmp) >= 3 ?
00545	            PyArray_STRIDES(tmp)[PyArray_NDIM(tmp)-3] : -1),
00546	                             (long int) (PyArray_NDIM(tmp) >= 2 ?
00547	            PyArray_STRIDES(tmp)[PyArray_NDIM(tmp)-2] : -1),
00548	                             (long int) (PyArray_NDIM(tmp) >= 1 ?
00549	            PyArray_STRIDES(tmp)[PyArray_NDIM(tmp)-1] : -1)
00550	            );
00551	                {
00552	        __failure = 10;
00553	        if (!PyErr_Occurred()) {
00554	            PyErr_SetString(PyExc_RuntimeError,
00555	                "Unexpected error in an Op's C code. "
00556	                "No Python exception was set.");
00557	        }
00558	        goto __label_10;}
00559	            }
00560	            // This is a TypeError to be consistent with DEBUG_MODE
00561	            // Note: DEBUG_MODE also tells the name of the container
00562	            if (PyArray_TYPE((PyArrayObject*) py_V9) != NPY_INT64) {
00563	                PyErr_Format(PyExc_TypeError,
00564	                             "expected type_num %d (NPY_INT64) got %d",
00565	                             NPY_INT64, PyArray_TYPE((PyArrayObject*) py_V9));
00566	                {
00567	        __failure = 10;
00568	        if (!PyErr_Occurred()) {
00569	            PyErr_SetString(PyExc_RuntimeError,
00570	                "Unexpected error in an Op's C code. "
00571	                "No Python exception was set.");
00572	        }
00573	        goto __label_10;}
00574	            }
00575	            
00576	        V9 = (PyArrayObject*)(py_V9);
00577	        Py_XINCREF(V9);
00578	        
00579	{
00580	
00581	    py_V11 = PyList_GET_ITEM(storage_V11, 0);
00582	    {Py_XINCREF(py_V11);}
00583	    
00584	            V11 = NULL;
00585	            if (py_V11 == Py_None) {
00586	                // We can either fail here or set V11 to NULL and rely on Ops
00587	                // using tensors to handle the NULL case, but if they fail to do so
00588	                // they'll end up with nasty segfaults, so this is public service.
00589	                PyErr_SetString(PyExc_ValueError, "expected an ndarray, not None");
00590	                {
00591	        __failure = 12;
00592	        if (!PyErr_Occurred()) {
00593	            PyErr_SetString(PyExc_RuntimeError,
00594	                "Unexpected error in an Op's C code. "
00595	                "No Python exception was set.");
00596	        }
00597	        goto __label_12;}
00598	            }
00599	            if (!PyArray_Check(py_V11)) {
00600	                PyErr_SetString(PyExc_ValueError, "expected an ndarray");
00601	                {
00602	        __failure = 12;
00603	        if (!PyErr_Occurred()) {
00604	            PyErr_SetString(PyExc_RuntimeError,
00605	                "Unexpected error in an Op's C code. "
00606	                "No Python exception was set.");
00607	        }
00608	        goto __label_12;}
00609	            }
00610	            // We expect NPY_INT32
00611	            if (!PyArray_ISALIGNED((PyArrayObject*) py_V11)) {
00612	                PyArrayObject * tmp = (PyArrayObject*) py_V11;
00613	                PyErr_Format(PyExc_NotImplementedError,
00614	                             "expected an aligned array of type %ld "
00615	                             "(NPY_INT32), got non-aligned array of type %ld"
00616	                             " with %ld dimensions, with 3 last dims "
00617	                             "%ld, %ld, %ld"
00618	                             " and 3 last strides %ld %ld, %ld.",
00619	                             (long int) NPY_INT32,
00620	                             (long int) PyArray_TYPE((PyArrayObject*) py_V11),
00621	                             (long int) PyArray_NDIM(tmp),
00622	                             (long int) (PyArray_NDIM(tmp) >= 3 ?
00623	            PyArray_DIMS(tmp)[PyArray_NDIM(tmp)-3] : -1),
00624	                             (long int) (PyArray_NDIM(tmp) >= 2 ?
00625	            PyArray_DIMS(tmp)[PyArray_NDIM(tmp)-2] : -1),
00626	                             (long int) (PyArray_NDIM(tmp) >= 1 ?
00627	            PyArray_DIMS(tmp)[PyArray_NDIM(tmp)-1] : -1),
00628	                             (long int) (PyArray_NDIM(tmp) >= 3 ?
00629	            PyArray_STRIDES(tmp)[PyArray_NDIM(tmp)-3] : -1),
00630	                             (long int) (PyArray_NDIM(tmp) >= 2 ?
00631	            PyArray_STRIDES(tmp)[PyArray_NDIM(tmp)-2] : -1),
00632	                             (long int) (PyArray_NDIM(tmp) >= 1 ?
00633	            PyArray_STRIDES(tmp)[PyArray_NDIM(tmp)-1] : -1)
00634	            );
00635	                {
00636	        __failure = 12;
00637	        if (!PyErr_Occurred()) {
00638	            PyErr_SetString(PyExc_RuntimeError,
00639	                "Unexpected error in an Op's C code. "
00640	                "No Python exception was set.");
00641	        }
00642	        goto __label_12;}
00643	            }
00644	            // This is a TypeError to be consistent with DEBUG_MODE
00645	            // Note: DEBUG_MODE also tells the name of the container
00646	            if (PyArray_TYPE((PyArrayObject*) py_V11) != NPY_INT32) {
00647	                PyErr_Format(PyExc_TypeError,
00648	                             "expected type_num %d (NPY_INT32) got %d",
00649	                             NPY_INT32, PyArray_TYPE((PyArrayObject*) py_V11));
00650	                {
00651	        __failure = 12;
00652	        if (!PyErr_Occurred()) {
00653	            PyErr_SetString(PyExc_RuntimeError,
00654	                "Unexpected error in an Op's C code. "
00655	                "No Python exception was set.");
00656	        }
00657	        goto __label_12;}
00658	            }
00659	            
00660	        V11 = (PyArrayObject*)(py_V11);
00661	        Py_XINCREF(V11);
00662	        
00663	{
00664	
00665	    py_V13 = PyList_GET_ITEM(storage_V13, 0);
00666	    {Py_XINCREF(py_V13);}
00667	    
00668	            V13 = NULL;
00669	            if (py_V13 == Py_None) {
00670	                // We can either fail here or set V13 to NULL and rely on Ops
00671	                // using tensors to handle the NULL case, but if they fail to do so
00672	                // they'll end up with nasty segfaults, so this is public service.
00673	                PyErr_SetString(PyExc_ValueError, "expected an ndarray, not None");
00674	                {
00675	        __failure = 14;
00676	        if (!PyErr_Occurred()) {
00677	            PyErr_SetString(PyExc_RuntimeError,
00678	                "Unexpected error in an Op's C code. "
00679	                "No Python exception was set.");
00680	        }
00681	        goto __label_14;}
00682	            }
00683	            if (!PyArray_Check(py_V13)) {
00684	                PyErr_SetString(PyExc_ValueError, "expected an ndarray");
00685	                {
00686	        __failure = 14;
00687	        if (!PyErr_Occurred()) {
00688	            PyErr_SetString(PyExc_RuntimeError,
00689	                "Unexpected error in an Op's C code. "
00690	                "No Python exception was set.");
00691	        }
00692	        goto __label_14;}
00693	            }
00694	            // We expect NPY_INT32
00695	            if (!PyArray_ISALIGNED((PyArrayObject*) py_V13)) {
00696	                PyArrayObject * tmp = (PyArrayObject*) py_V13;
00697	                PyErr_Format(PyExc_NotImplementedError,
00698	                             "expected an aligned array of type %ld "
00699	                             "(NPY_INT32), got non-aligned array of type %ld"
00700	                             " with %ld dimensions, with 3 last dims "
00701	                             "%ld, %ld, %ld"
00702	                             " and 3 last strides %ld %ld, %ld.",
00703	                             (long int) NPY_INT32,
00704	                             (long int) PyArray_TYPE((PyArrayObject*) py_V13),
00705	                             (long int) PyArray_NDIM(tmp),
00706	                             (long int) (PyArray_NDIM(tmp) >= 3 ?
00707	            PyArray_DIMS(tmp)[PyArray_NDIM(tmp)-3] : -1),
00708	                             (long int) (PyArray_NDIM(tmp) >= 2 ?
00709	            PyArray_DIMS(tmp)[PyArray_NDIM(tmp)-2] : -1),
00710	                             (long int) (PyArray_NDIM(tmp) >= 1 ?
00711	            PyArray_DIMS(tmp)[PyArray_NDIM(tmp)-1] : -1),
00712	                             (long int) (PyArray_NDIM(tmp) >= 3 ?
00713	            PyArray_STRIDES(tmp)[PyArray_NDIM(tmp)-3] : -1),
00714	                             (long int) (PyArray_NDIM(tmp) >= 2 ?
00715	            PyArray_STRIDES(tmp)[PyArray_NDIM(tmp)-2] : -1),
00716	                             (long int) (PyArray_NDIM(tmp) >= 1 ?
00717	            PyArray_STRIDES(tmp)[PyArray_NDIM(tmp)-1] : -1)
00718	            );
00719	                {
00720	        __failure = 14;
00721	        if (!PyErr_Occurred()) {
00722	            PyErr_SetString(PyExc_RuntimeError,
00723	                "Unexpected error in an Op's C code. "
00724	                "No Python exception was set.");
00725	        }
00726	        goto __label_14;}
00727	            }
00728	            // This is a TypeError to be consistent with DEBUG_MODE
00729	            // Note: DEBUG_MODE also tells the name of the container
00730	            if (PyArray_TYPE((PyArrayObject*) py_V13) != NPY_INT32) {
00731	                PyErr_Format(PyExc_TypeError,
00732	                             "expected type_num %d (NPY_INT32) got %d",
00733	                             NPY_INT32, PyArray_TYPE((PyArrayObject*) py_V13));
00734	                {
00735	        __failure = 14;
00736	        if (!PyErr_Occurred()) {
00737	            PyErr_SetString(PyExc_RuntimeError,
00738	                "Unexpected error in an Op's C code. "
00739	                "No Python exception was set.");
00740	        }
00741	        goto __label_14;}
00742	            }
00743	            
00744	        V13 = (PyArrayObject*)(py_V13);
00745	        Py_XINCREF(V13);
00746	        
00747	{
00748	// Op class DotModulo
00749	
00750	        int osize = -1;
00751	        if (PyArray_NDIM(V3) != 2) {PyErr_SetString(PyExc_NotImplementedError, "rank(A) != 2"); {
00752	        __failure = 15;
00753	        if (!PyErr_Occurred()) {
00754	            PyErr_SetString(PyExc_RuntimeError,
00755	                "Unexpected error in an Op's C code. "
00756	                "No Python exception was set.");
00757	        }
00758	        goto __label_15;};}
00759	        if (PyArray_NDIM(V5) != 1) {PyErr_SetString(PyExc_NotImplementedError, "rank(v) != 1"); {
00760	        __failure = 15;
00761	        if (!PyErr_Occurred()) {
00762	            PyErr_SetString(PyExc_RuntimeError,
00763	                "Unexpected error in an Op's C code. "
00764	                "No Python exception was set.");
00765	        }
00766	        goto __label_15;};}
00767	        if (PyArray_NDIM(V7) != 0) {PyErr_SetString(PyExc_NotImplementedError, "rank(m) != 0"); {
00768	        __failure = 15;
00769	        if (!PyErr_Occurred()) {
00770	            PyErr_SetString(PyExc_RuntimeError,
00771	                "Unexpected error in an Op's C code. "
00772	                "No Python exception was set.");
00773	        }
00774	        goto __label_15;};}
00775	        if (PyArray_NDIM(V9) != 2) {PyErr_SetString(PyExc_NotImplementedError, "rank(A2) != 2"); {
00776	        __failure = 15;
00777	        if (!PyErr_Occurred()) {
00778	            PyErr_SetString(PyExc_RuntimeError,
00779	                "Unexpected error in an Op's C code. "
00780	                "No Python exception was set.");
00781	        }
00782	        goto __label_15;};}
00783	        if (PyArray_NDIM(V11) != 1) {PyErr_SetString(PyExc_NotImplementedError, "rank(v2) != 1"); {
00784	        __failure = 15;
00785	        if (!PyErr_Occurred()) {
00786	            PyErr_SetString(PyExc_RuntimeError,
00787	                "Unexpected error in an Op's C code. "
00788	                "No Python exception was set.");
00789	        }
00790	        goto __label_15;};}
00791	        if (PyArray_NDIM(V13) != 0) {PyErr_SetString(PyExc_NotImplementedError, "rank(m2) != 0"); {
00792	        __failure = 15;
00793	        if (!PyErr_Occurred()) {
00794	            PyErr_SetString(PyExc_RuntimeError,
00795	                "Unexpected error in an Op's C code. "
00796	                "No Python exception was set.");
00797	        }
00798	        goto __label_15;};}
00799	
00800	        if( PyArray_DIMS(V3)[1] != PyArray_DIMS(V5)[0])
00801	        {PyErr_SetString(PyExc_NotImplementedError, "A and s shapes don't agree."); {
00802	        __failure = 15;
00803	        if (!PyErr_Occurred()) {
00804	            PyErr_SetString(PyExc_RuntimeError,
00805	                "Unexpected error in an Op's C code. "
00806	                "No Python exception was set.");
00807	        }
00808	        goto __label_15;};}
00809	        if( PyArray_DIMS(V9)[1] != PyArray_DIMS(V11)[0])
00810	        {PyErr_SetString(PyExc_NotImplementedError, "A2 and s2 shapes don't agree."); {
00811	        __failure = 15;
00812	        if (!PyErr_Occurred()) {
00813	            PyErr_SetString(PyExc_RuntimeError,
00814	                "Unexpected error in an Op's C code. "
00815	                "No Python exception was set.");
00816	        }
00817	        goto __label_15;};}
00818	
00819	        osize = PyArray_DIMS(V3)[0] + PyArray_DIMS(V9)[0];
00820	        if (!V1
00821	            || (PyArray_DIMS(V1)[0] != osize))
00822	        {
00823	            {Py_XDECREF(V1);}
00824	            npy_intp dims[] = {0,};
00825	            dims[0] = osize;
00826	            V1 = (PyArrayObject*) PyArray_SimpleNew(1, dims, PyArray_TYPE(V5));
00827	        }
00828	
00829	        if(!V1){{
00830	        __failure = 15;
00831	        if (!PyErr_Occurred()) {
00832	            PyErr_SetString(PyExc_RuntimeError,
00833	                "Unexpected error in an Op's C code. "
00834	                "No Python exception was set.");
00835	        }
00836	        goto __label_15;};}
00837	
00838	        {   //makes it compile even though labels jump over variable definitions.
00839	
00840	            // A has size MxN, s has N, output M
00841	            npy_intp M = PyArray_DIMS(V3)[0];
00842	            npy_intp N = PyArray_DIMS(V3)[1];
00843	
00844	            const dtype_V3* __restrict__ DA = (dtype_V3*)PyArray_DATA(V3);
00845	            dtype_V5* __restrict__ Ds = (dtype_V5*)PyArray_DATA(V5);
00846	            dtype_V1* __restrict__ Dz = (dtype_V1*)PyArray_DATA(V1);
00847	            const dtype_V7 m = ((dtype_V7*)PyArray_DATA(V7))[0];
00848	
00849	            npy_intp SA = PyArray_STRIDES(V3)[1] / PyArray_DESCR(V3)->elsize;
00850	            npy_intp Ss = PyArray_STRIDES(V5)[0] / PyArray_DESCR(V5)->elsize;
00851	            npy_intp Sz = PyArray_STRIDES(V1)[0] / PyArray_DESCR(V1)->elsize;
00852	
00853	            for (npy_int32 i = 0; i < M; ++i)
00854	            {
00855	                const dtype_V3* __restrict__ Ak = (dtype_V3*)(PyArray_BYTES(V3) + PyArray_STRIDES(V3)[0] * i);
00856	
00857	                npy_int64 r = 0;
00858	
00859	                for (npy_int32 j = 0; j < N; ++j)
00860	                {
00861	                    r += (npy_int64)(Ds[j * Ss] * (npy_int64)(Ak[j * SA])) % m;
00862	                }
00863	
00864	                Dz[i * Sz] = r % m;
00865	            }
00866	        }
00867	
00868	        //redo it with the second triple of inputs
00869	        {
00870	            // A has size MxN, s has N, output M
00871	            npy_intp M = PyArray_DIMS(V9)[0];
00872	            npy_intp N = PyArray_DIMS(V9)[1];
00873	
00874	            const dtype_V9* __restrict__ DA = (dtype_V9*)PyArray_DATA(V9);
00875	            dtype_V11* __restrict__ Ds = (dtype_V11*)PyArray_DATA(V11);
00876	            const dtype_V13 m = ((dtype_V13*)PyArray_DATA(V13))[0];
00877	
00878	            npy_intp SA = PyArray_STRIDES(V9)[1] / PyArray_DESCR(V9)->elsize;
00879	            npy_intp Ss = PyArray_STRIDES(V11)[0] / PyArray_DESCR(V11)->elsize;
00880	            npy_intp Sz = PyArray_STRIDES(V1)[0] / PyArray_DESCR(V1)->elsize;
00881	
00882	            dtype_V1* __restrict__ Dz = (dtype_V1*)PyArray_DATA(V1) + PyArray_DIMS(V3)[0] * Sz;
00883	
00884	            for (npy_int32 i = 0; i < M; ++i)
00885	            {
00886	                const dtype_V9* __restrict__ Ak = (dtype_V9*)(PyArray_BYTES(V9) + PyArray_STRIDES(V9)[0] * i);
00887	
00888	                npy_int64 r = 0;
00889	
00890	                for (npy_int32 j = 0; j < N; ++j)
00891	                {
00892	                    r += (npy_int64)(Ds[j * Ss] * (npy_int64)(Ak[j * SA])) % m;
00893	                }
00894	
00895	                Dz[i * Sz] = r % m;
00896	            }
00897	
00898	        }
00899	
00900	        __label_15:
00901	
00902	double __DUMMY_15;
00903	
00904	}
00905	__label_14:
00906	
00907	        if (V13) {
00908	            Py_XDECREF(V13);
00909	        }
00910	        
00911	    {Py_XDECREF(py_V13);}
00912	    
00913	double __DUMMY_14;
00914	
00915	}
00916	__label_12:
00917	
00918	        if (V11) {
00919	            Py_XDECREF(V11);
00920	        }
00921	        
00922	    {Py_XDECREF(py_V11);}
00923	    
00924	double __DUMMY_12;
00925	
00926	}
00927	__label_10:
00928	
00929	        if (V9) {
00930	            Py_XDECREF(V9);
00931	        }
00932	        
00933	    {Py_XDECREF(py_V9);}
00934	    
00935	double __DUMMY_10;
00936	
00937	}
00938	__label_8:
00939	
00940	        if (V7) {
00941	            Py_XDECREF(V7);
00942	        }
00943	        
00944	    {Py_XDECREF(py_V7);}
00945	    
00946	double __DUMMY_8;
00947	
00948	}
00949	__label_6:
00950	
00951	        if (V5) {
00952	            Py_XDECREF(V5);
00953	        }
00954	        
00955	    {Py_XDECREF(py_V5);}
00956	    
00957	double __DUMMY_6;
00958	
00959	}
00960	__label_4:
00961	
00962	        if (V3) {
00963	            Py_XDECREF(V3);
00964	        }
00965	        
00966	    {Py_XDECREF(py_V3);}
00967	    
00968	double __DUMMY_4;
00969	
00970	}
00971	__label_2:
00972	
00973	    if (!__failure) {
00974	      
00975	        {Py_XDECREF(py_V1);}
00976	        if (!V1) {
00977	            Py_INCREF(Py_None);
00978	            py_V1 = Py_None;
00979	        }
00980	        else if ((void*)py_V1 != (void*)V1) {
00981	            py_V1 = (PyObject*)V1;
00982	        }
00983	
00984	        {Py_XINCREF(py_V1);}
00985	
00986	        if (V1 && !PyArray_ISALIGNED((PyArrayObject*) py_V1)) {
00987	            PyErr_Format(PyExc_NotImplementedError,
00988	                         "c_sync: expected an aligned array, got non-aligned array of type %ld"
00989	                         " with %ld dimensions, with 3 last dims "
00990	                         "%ld, %ld, %ld"
00991	                         " and 3 last strides %ld %ld, %ld.",
00992	                         (long int) PyArray_TYPE((PyArrayObject*) py_V1),
00993	                         (long int) PyArray_NDIM(V1),
00994	                         (long int) (PyArray_NDIM(V1) >= 3 ?
00995	        PyArray_DIMS(V1)[PyArray_NDIM(V1)-3] : -1),
00996	                         (long int) (PyArray_NDIM(V1) >= 2 ?
00997	        PyArray_DIMS(V1)[PyArray_NDIM(V1)-2] : -1),
00998	                         (long int) (PyArray_NDIM(V1) >= 1 ?
00999	        PyArray_DIMS(V1)[PyArray_NDIM(V1)-1] : -1),
01000	                         (long int) (PyArray_NDIM(V1) >= 3 ?
01001	        PyArray_STRIDES(V1)[PyArray_NDIM(V1)-3] : -1),
01002	                         (long int) (PyArray_NDIM(V1) >= 2 ?
01003	        PyArray_STRIDES(V1)[PyArray_NDIM(V1)-2] : -1),
01004	                         (long int) (PyArray_NDIM(V1) >= 1 ?
01005	        PyArray_STRIDES(V1)[PyArray_NDIM(V1)-1] : -1)
01006	        );
01007	            {
01008	        __failure = 2;
01009	        if (!PyErr_Occurred()) {
01010	            PyErr_SetString(PyExc_RuntimeError,
01011	                "Unexpected error in an Op's C code. "
01012	                "No Python exception was set.");
01013	        }
01014	        goto __label_2;}
01015	        }
01016	        
01017	      PyObject* old = PyList_GET_ITEM(storage_V1, 0);
01018	      {Py_XINCREF(py_V1);}
01019	      PyList_SET_ITEM(storage_V1, 0, py_V1);
01020	      {Py_XDECREF(old);}
01021	    }
01022	    
01023	        if (V1) {
01024	            Py_XDECREF(V1);
01025	        }
01026	        
01027	    {Py_XDECREF(py_V1);}
01028	    
01029	double __DUMMY_2;
01030	
01031	}
01032	
01033	            
01034	        if (__failure) {
01035	            // When there is a failure, this code puts the exception
01036	            // in __ERROR.
01037	            PyObject* err_type = NULL;
01038	            PyObject* err_msg = NULL;
01039	            PyObject* err_traceback = NULL;
01040	            PyErr_Fetch(&err_type, &err_msg, &err_traceback);
01041	            if (!err_type) {err_type = Py_None;Py_INCREF(Py_None);}
01042	            if (!err_msg) {err_msg = Py_None; Py_INCREF(Py_None);}
01043	            if (!err_traceback) {err_traceback = Py_None; Py_INCREF(Py_None);}
01044	            PyObject* old_err_type = PyList_GET_ITEM(__ERROR, 0);
01045	            PyObject* old_err_msg = PyList_GET_ITEM(__ERROR, 1);
01046	            PyObject* old_err_traceback = PyList_GET_ITEM(__ERROR, 2);
01047	            PyList_SET_ITEM(__ERROR, 0, err_type);
01048	            PyList_SET_ITEM(__ERROR, 1, err_msg);
01049	            PyList_SET_ITEM(__ERROR, 2, err_traceback);
01050	            {Py_XDECREF(old_err_type);}
01051	            {Py_XDECREF(old_err_msg);}
01052	            {Py_XDECREF(old_err_traceback);}
01053	        }
01054	        // The failure code is returned to index what code block failed.
01055	        return __failure;
01056	        
01057	        }
01058	    };
01059	    }
01060	    
01061	
01062	        static int __struct_compiled_op_m75022cac696dc858984a7c4467166cc6915405b19d04c2580f5acf71c834d9de_executor(__struct_compiled_op_m75022cac696dc858984a7c4467166cc6915405b19d04c2580f5acf71c834d9de *self) {
01063	            return self->run();
01064	        }
01065	
01066	        static void __struct_compiled_op_m75022cac696dc858984a7c4467166cc6915405b19d04c2580f5acf71c834d9de_destructor(PyObject *capsule) {
01067	            __struct_compiled_op_m75022cac696dc858984a7c4467166cc6915405b19d04c2580f5acf71c834d9de *self = (__struct_compiled_op_m75022cac696dc858984a7c4467166cc6915405b19d04c2580f5acf71c834d9de *)PyCapsule_GetContext(capsule);
01068	            delete self;
01069	        }
01070	        
01071	//////////////////////
01072	////  Functions
01073	//////////////////////
01074	static PyObject * instantiate(PyObject * self, PyObject *argtuple) {
01075	  assert(PyTuple_Check(argtuple));
01076	  if (8 != PyTuple_Size(argtuple)){ 
01077	     PyErr_Format(PyExc_TypeError, "Wrong number of arguments, expected 8, got %i", (int)PyTuple_Size(argtuple));
01078	     return NULL;
01079	  }
01080	  __struct_compiled_op_m75022cac696dc858984a7c4467166cc6915405b19d04c2580f5acf71c834d9de* struct_ptr = new __struct_compiled_op_m75022cac696dc858984a7c4467166cc6915405b19d04c2580f5acf71c834d9de();
01081	  if (struct_ptr->init( PyTuple_GET_ITEM(argtuple, 0),PyTuple_GET_ITEM(argtuple, 1),PyTuple_GET_ITEM(argtuple, 2),PyTuple_GET_ITEM(argtuple, 3),PyTuple_GET_ITEM(argtuple, 4),PyTuple_GET_ITEM(argtuple, 5),PyTuple_GET_ITEM(argtuple, 6),PyTuple_GET_ITEM(argtuple, 7) ) != 0) {
01082	    delete struct_ptr;
01083	    return NULL;
01084	  }
01085	    PyObject* thunk = PyCapsule_New((void*)(&__struct_compiled_op_m75022cac696dc858984a7c4467166cc6915405b19d04c2580f5acf71c834d9de_executor), NULL, __struct_compiled_op_m75022cac696dc858984a7c4467166cc6915405b19d04c2580f5acf71c834d9de_destructor);
01086	    if (thunk != NULL && PyCapsule_SetContext(thunk, struct_ptr) != 0) {
01087	        PyErr_Clear();
01088	        Py_DECREF(thunk);
01089	        thunk = NULL;
01090	    }
01091	
01092	  return thunk; }
01093	
01094	//////////////////////
01095	////  Module init
01096	//////////////////////
01097	static PyMethodDef MyMethods[] = {
01098		{"instantiate", instantiate, METH_VARARGS, "undocumented"} ,
01099		{NULL, NULL, 0, NULL}
01100	};
01101	static struct PyModuleDef moduledef = {
01102	      PyModuleDef_HEAD_INIT,
01103	      "m75022cac696dc858984a7c4467166cc6915405b19d04c2580f5acf71c834d9de",
01104	      NULL,
01105	      -1,
01106	      MyMethods,
01107	};
01108	
01109	PyMODINIT_FUNC PyInit_m75022cac696dc858984a7c4467166cc6915405b19d04c2580f5acf71c834d9de(void) {
01110	   import_array();
01111	    PyObject *m = PyModule_Create(&moduledef);
01112	    return m;
01113	}
01114	
===============================
Problem occurred during compilation with the command line below:
/home/eramamur/bin/miniconda3/envs/gpu_keras_theano/bin/x86_64-conda_cos6-linux-gnu-c++ -shared -g -O3 -fno-math-errno -Wno-unused-label -Wno-unused-variable -Wno-write-strings -DNPY_NO_DEPRECATED_API=NPY_1_7_API_VERSION -m64 -fPIC -I/home/eramamur/bin/miniconda3/envs/gpu_keras_theano/lib/python3.6/site-packages/numpy/core/include -I/home/eramamur/bin/miniconda3/envs/gpu_keras_theano/include/python3.6m -I/home/eramamur/bin/miniconda3/envs/gpu_keras_theano/lib/python3.6/site-packages/theano/gof/c_code -L/home/eramamur/bin/miniconda3/envs/gpu_keras_theano/lib -fvisibility=hidden -o /home/eramamur/.theano/compiledir_Linux-3.10-el7.x86_64-x86_64-with-centos-7.4.1708-Core-x86_64-3.6.7-64/tmp92bmwz_a/m75022cac696dc858984a7c4467166cc6915405b19d04c2580f5acf71c834d9de.so /home/eramamur/.theano/compiledir_Linux-3.10-el7.x86_64-x86_64-with-centos-7.4.1708-Core-x86_64-3.6.7-64/tmp92bmwz_a/mod.cpp -lpython3.6m/home/eramamur/.theano/compiledir_Linux-3.10-el7.x86_64-x86_64-with-centos-7.4.1708-Core-x86_64-3.6.7-64/tmp92bmwz_a/mod.cpp:1113:1: fatal error: error writing to /tmp/ccimxr0A.s: No space left on device
 }
 ^
compilation terminated.
